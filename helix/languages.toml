[[language]]
name = "c"
language-servers = [ "clangd" ]


[[language]]
name = "go"
auto-format = true
formatter = { command = "goimports" }


[[language]]
name = "lua"
formatter = { command = "stylua", args = ["--stdin"] }
language-servers = [ "lua-language-server" ]

[language.debugger]
name = "luadebug"
transport = "stdio"
command = "lua -e 'require(\"luadebug\").start()'"

[[language.debugger.templates]]
name = "lua-script"
request = "launch"
completion = [ { name = "script", completion = "filename" } ]
args = { program = "{0}" }


[[language]]
name = "python"
language-servers = [ "pylyzer" ]
scope = "source.python"
formatter = { command = "ruff", args = ["--quiet", "-"] }
auto-format = true
roots = [ "pyproject.toml", "setup.py", "requirements.txt", "Poetry.lock"]

[language-server.pylyzer]
command = "pylyzer"
config = { settings = { args = [ "--server" ] } }

[language.debugger]
name = "debugpy"
transport = "stdio"
command = "python3"
args = ["-m",  "debugpy.adapter"]

[[language.debugger.templates]]
name = "source"
request = "launch"
completion = [ { name = "entrypoint", completion = "filename", default = "." } ]
args = { mode = "debug", program = "{0}" }


[[language]]
name = "rust"
scope = "source.rust"
roots = ["Cargo.toml", "Cargo.lock"]

[[language-server.rust-analyzer.config]]
check = { command = "clippy", features = "all" }
diagnostics = { experimental = { enable = false } }
hover = { actions = { enable = true } }
typing = { autoClosingAngleBrackets = { enable = true } }
cargo = { allFeatures = true }
procMacro = { enable = true }

[language.debugger]
name = "lldb-vscode"
transport = "stdio"
command = "lldb-vscode"

[[language.debugger.templates]]
name = "binary"
request = "launch"
completion = [ { name = "binary", completion = "filename" } ]
args = { program = "{0}", initCommands = [ "command script import /usr/local/etc/lldb_vscode_rustc_primer.py" ] }


[[language]]
name = "zig"
language-servers = [ "zls" ]

[language.debugger]
name = "lldb-vscode"
transport = "stdio"
command = "lldb-vscode"

[[language.debugger.templates]]
name = "binary"
request = "launch"
completion = [ { name = "binary", completion = "filename" } ]
args = { program = "{workspaceRoot}/zig-out/bin/{fileBasenameNoExtension}" }
